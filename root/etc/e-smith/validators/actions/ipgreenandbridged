#!/usr/bin/perl -w

#
# Copyright (C) 2017 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::NetworksDB;
use esmith::util;

my $ip = shift || die("Missing IP argument");

my $ndb = esmith::NetworksDB->open_ro or die("Could not open Networks DB");

sub is_reserved_ip
{
    my $checkIp = shift;

    my @reserved = ('127.0.0.1');
    foreach ($ndb->interfaces()) {
        my $ipaddr = $_->prop('ipaddr') || next;
        if ($ipaddr eq $checkIp) {
            push (@reserved, $ipaddr);
        }
    }

    if ( grep { $checkIp eq $_ } @reserved )
    {
	return 1; # false
    }

    return 0; # true
}

sub is_local_ip
{
    my $localip = shift;

    if(_lookup_green_bridge($localip)) {
        return 1;
    }

    # Not OK. The IP is not on any of our green networks.
    return 0;
}

sub _lookup_green_bridge
{
    my $localip = shift;

    # Make sure the IP is local
    my @interfaces = $ndb->green();

    foreach my $i (@interfaces)
    {
        if($i->prop('type') ne 'bridge') {
            next;
        }
        my $ipaddr = $i->prop('ipaddr') || next;
        my $mask = $i->prop('netmask') || next;
        if (Net::IPv4Addr::ipv4_in_network(esmith::util::computeLocalNetworkShortSpec($ipaddr,$mask), $localip)) {
            return $i->key;
        }
    }
    return '';
}

sub is_free
{
    my $ip = shift;

    my $arping = system(qw(/sbin/arping -q -c 2 -w 3 -D -I), _lookup_green_bridge($ip), $ip);

    if($arping == 0) {
        return 1; # is_free=true
    }
    return 0; # is_free=false
}

# Fail, if ip is reserved or is not in local networks
if (is_reserved_ip($ip)) { # fail if ip is reserved
    exit 3;
} elsif (!is_local_ip($ip)) { # fail if ip is not in green network
    exit 4;
} elsif (!is_free($ip)) { # fail is ip is already in use
    exit 5;
}

# Success
exit 0;
